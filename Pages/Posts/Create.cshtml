@page
@model ScientificArticleSimplifier.Pages.Posts.CreateModel

@{
    ViewData["Title"] = "Create";
}

<h2>Gerar Postagem</h2>

<hr />
<div class="row">
    <div class="col-md-8">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
  
            <div class="form-group">
                <label asp-for="Post.Title" class="control-label"></label>
                <input asp-for="Post.Title" class="form-control" />
                <span asp-validation-for="Post.Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Post.Description" class="control-label"></label>
                <input asp-for="Post.Description" class="form-control" />
                <span asp-validation-for="Post.Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Post.Content" class="control-label"></label>
                <textarea asp-for="Post.Content" class="form-control" id="editor"></textarea>
                <span asp-validation-for="Post.Content" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Post.Path" class="control-label"></label>
                <input asp-for="Post.Path" class="form-control" />
                <span asp-validation-for="Post.Path" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Gerar" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-page="Index">Voltar a lista</a>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const titleInput = document.querySelector('input[name="Post.Title"]');
        const descriptionInput = document.querySelector('input[name="Post.Description"]');
        const contentInput = document.querySelector('#editor');

        // Variável para armazenar a instância do CKEditor
        let editorInstance;

        // Função para buscar dados baseados no título
        async function fetchDescriptionAndContent() {
            const title = titleInput.value;

            // Se o título estiver vazio, não faça nada
            if (!title) return;

            try {
                // Fazendo a requisição para o backend
                const response = await fetch(`?handler=Gemini&text=${encodeURIComponent(title)}`, {
                    method: 'GET',
                });

                if (response.ok) {
                    const data = await response.json();

                    // Imprimir o JSON retornado para ver como ele está estruturado
                    console.log(data);

                    // Extrai a string JSON aninhada, remove as marcações Markdown e substitui quebras de linha e outros caracteres de controle
                    //let nestedJsonString = data.result?.result?.replace(/^```json\s*/, '').replace(/```$/, '') || '';
                    //nestedJsonString = nestedJsonString.replace(/[\r\n\t]+/g, ' '); // Remove quebras de linha e tabulações

                    // Faz o parse do JSON limpo
                    const parsedResult = JSON.parse(data.result);

                    titleInput.value = parsedResult.titulo || title;
                    descriptionInput.value = parsedResult.descricao || '';
                    contentInput.value = parsedResult.conteudo || '';

                    // Usando o CKEditor para definir o conteúdo no editor
                    if (editorInstance) {
                        editorInstance.setData(parsedResult.conteudo || ''); // Atualiza o conteúdo no editor
                    }

                } else {
                    console.error('Erro na resposta da API');
                }
            } catch (error) {
                console.error('Erro ao buscar dados:', error);
            }
        }

        // Executa a função ao mudar o título
        titleInput.addEventListener('change', fetchDescriptionAndContent);

        // Inicializando o CKEditor
        ClassicEditor
            .create(contentInput)
            .then(editor => {
                editorInstance = editor; // Armazena a instância do editor
            })
            .catch(error => {
                console.error('Erro ao iniciar o CKEditor:', error);
            });

    });
</script>

<script src="https://cdn.ckeditor.com/ckeditor5/23.1.0/classic/ckeditor.js"></script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

