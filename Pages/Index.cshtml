@page
@model CreateModel

@{
    ViewData["Title"] = "";
}

<script src="https://cdn.ckeditor.com/ckeditor5/23.1.0/classic/ckeditor.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

<hr style="visibility: hidden;" />

<div class="row container-fluid align-self-center d-flex justify-content-center">
    <div class="col-md-8">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group" id="FinalDaPagina">

                <div class="align-self-center d-flex justify-content-center">
                    <h5 class="gradient-custom">Gerar Postagem com IA</h5>
                </div>

                <div class="input-group">
                    <input id="postSearch" class="form-control" placeholder="Informe o título para a IA gerar o conteúdo" />
                </div>

                <div class="d-flex justify-content-center align-items-center mt-4 gradient-custom">
                    <div class="spinner-grow" style="width: 3rem; height: 3rem; display: none;" role="status" id="carregando">
                        <span class="sr-only"></span>
                    </div>
                </div>

            </div>

            <div style="display: none" id="ocultar">

                <div class="col-xs-4">
                   <div class="form-group">
                        <label asp-for="Post.Title" class="control-label h6"></label>
                        <div class="input-group">
                           
                            <input asp-for="Post.Title" id="postTitle" class="form-control" />
                            <button type="button" class="btn btn-outline-primary" id="copyButton" onclick="copyToClipboard('postTitle')">
                                <i class="bi bi-copy">copiar</i> <!-- Ícone do Bootstrap -->
                            </button>
                        </div>
                        <small id="postTitleFeedback" style="display: none;">Título copiado!</small>

                        <span asp-validation-for="Post.Title" class="text-danger"></span>
                   </div>
                    
                </div>

                <div class="form-group">
                    <label asp-for="Post.Description" class="control-label h6"></label>

                    <div class="input-group">
                        <input asp-for="Post.Description" class="form-control" id="postDescription" />
                        <button type="button" class="btn btn-outline-primary" id="copyButton" onclick="copyToClipboard('postDescription')">
                            <i class="bi bi-copy">copiar</i> <!-- Ícone do Bootstrap -->
                        </button>
                    </div>
                    <small id="postDescriptionFeedback" style="display: none;">Descrição copiada!</small>

                    <span asp-validation-for="Post.Description" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Post.Content" class="control-label h6"></label>
                    <div class="d-flex">
                        <textarea asp-for="Post.Content" class="form-control flex-grow-1 editor" id="postContent" rows="4"></textarea>
                        <!-- Botão com a classe btn-sm para tamanho pequeno -->
                        <button type="button" class="btn btn-outline-primary btn-sm" id="copyButton" onclick="copyToClipboard('postContent')">
                            <i class="bi bi-copy"> Copiar</i>
                        </button>
                    </div>
                    <small id="postContentFeedback" style="display: none;">Conteúdo copiado!</small>
                    <span asp-validation-for="Post.Content" class="text-danger"></span>
                </div>

                <div class="position-relative">
                    <!-- Seção de Exportar fixada -->
                    <div class="container d-flex flex-column align-items-end p-3">

                        <h6 class="mb-3 text-center">Exportar</h6>
                        <div class="d-flex flex-wrap justify-content-center mb-3">
                            <button type="button" class="btn btn-primary me-2 mb-2" onclick="salvarPdf()" style="border-radius: 20px;">PDF</button>
        
                        </div>
                       
                    </div>
                </div>

            </div>

        </form>
    </div>
</div>



<script>

    const titleInput = document.querySelector('#postSearch');
    const title = document.querySelector('input[name="Post.Title"]');
    const descriptionInput = document.querySelector('input[name="Post.Description"]');
    const contentInput = document.querySelector('.editor');

    // Variável para armazenar a instância do CKEditor
    let editorInstance;

    // Vincula a função ao botão de exportação PDF
    const btnPdf = document.querySelector("button[onclick='salvarPdf()']");
    if (btnPdf) {
        console.log("Botão de exportação encontrado!");
        btnPdf.addEventListener('click', salvarPdf);
    } else {
        console.log("Botão de exportação não encontrado.");
    }

    // Executa a função ao mudar o título
    titleInput.addEventListener('change', fetchDescriptionAndContent);

    // Inicializando o CKEditor
    ClassicEditor
        .create(contentInput)
        .then(editor => {
            editorInstance = editor; // Armazena a instância do editor
        })
        .catch(error => {
            console.error('Erro ao iniciar o CKEditor:', error);
        });


        // Função para exportar o conteúdo como PDF
        async function salvarPdf() {
            // Captura os valores dos campos de entrada
            const title = document.getElementById('postTitle').value;
            const description = document.getElementById('postDescription').value;
            const content = document.getElementById('postContent').value;

            // Verifica se os dados estão preenchidos
            if (!title || !description || !content) {
                alert("Todos os campos (Título, Descrição e Conteúdo) devem ser preenchidos antes de exportar!");
                return;
            }

            console.log("Título:", title);
            console.log("Descrição:", description);
            console.log("Conteúdo:", content);

            // Criar um documento PDF
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            // Adicionar título ao PDF
            doc.setFontSize(18);
            doc.text(title, 10, 20);

            // Adicionar descrição ao PDF
            doc.setFontSize(14);
            doc.text("Descrição:", 10, 40);
            doc.setFontSize(12);
            doc.text(description, 10, 50);

            // Adicionar conteúdo ao PDF
            doc.setFontSize(14);
            doc.text("Conteúdo:", 10, 70);
            doc.setFontSize(12);

            // Quebra automática de linhas para o conteúdo longo
            const contentLines = doc.splitTextToSize(content, 180); // Ajuste a largura das linhas
            doc.text(contentLines, 10, 80);

            // Salvar o PDF com um nome padrão
            doc.save('postagem.pdf');
        }

    function copyToClipboard(fieldId) {
        const field = document.getElementById(fieldId);
        const feedback = document.getElementById(`${fieldId}Feedback`);

        if (!field) return;

        // Seleciona o texto e copia
        if (field.tagName === 'TEXTAREA' || field.tagName === 'INPUT') {
            field.select();
            field.setSelectionRange(0, 99999); // Compatibilidade com dispositivos móveis
        }

        navigator.clipboard.writeText(field.value)
            .then(() => {
                // Exibe a mensagem de feedback
                feedback.style.display = 'inline';

                // Oculta a mensagem após 2 segundos
                setTimeout(() => {
                    feedback.style.display = 'none';
                }, 2000);
            })
            .catch(() => {
                alert('Erro ao copiar o conteúdo!');
            });
    }

        // Função para buscar dados baseados no título
        async function fetchDescriptionAndContent() {
            const titleValue = titleInput.value;

            console.log("Titulo:",titleValue);
            
            if (!titleValue) {
                $("#ocultar").hide();
            }

            if (titleValue) {
                $("#carregando").show();
            }

            // Se o título estiver vazio, não faça nada
            if (!titleValue) return;

            try {
                // Fazendo a requisição para o backend
                const response = await fetch(`?handler=Gemini&text=${encodeURIComponent(titleValue)}`, {
                    method: 'GET',
                });

                if (response.ok) {
                    
                    $("#carregando").hide();
                    
                    $("#ocultar").show();

                    const data = await response.json();

                    // Imprimir o JSON retornado para ver como ele está estruturado
                    console.log(data);

                    // Faz o parse do JSON limpo
                    const parsedResult = JSON.parse(data.result);

                    title.value = parsedResult.titulo || '';
                    descriptionInput.value = parsedResult.descricao || '';
                    contentInput.value = parsedResult.conteudo || '';
                    titleInput.value = '';

                    // Usando o CKEditor para definir o conteúdo no editor
                    if (editorInstance) {
                        editorInstance.setData(parsedResult.conteudo || ''); // Atualiza o conteúdo no editor
                    }

                } else {
                    console.error('Erro na resposta da API');
                }
            } catch (error) {
                console.error('Erro ao buscar dados:', error);
            }
        }

</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
}